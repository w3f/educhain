{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web3 Educhain Educating Web3 through Polkadot SDK. Why Educhain? At the time of creating Web3 Educhain project, there were around 50 parachains on Polkadot network but no concrete guides on launching a production grade parachain and its maintenance. Also, there are very limited tutorials that demonstrate Polkadot SDK features that are shipped with FRAME library. Web3 Educhain intends to address these issues.","title":"Web3 Educhain"},{"location":"#web3-educhain","text":"Educating Web3 through Polkadot SDK.","title":"Web3 Educhain"},{"location":"#why-educhain","text":"At the time of creating Web3 Educhain project, there were around 50 parachains on Polkadot network but no concrete guides on launching a production grade parachain and its maintenance. Also, there are very limited tutorials that demonstrate Polkadot SDK features that are shipped with FRAME library. Web3 Educhain intends to address these issues.","title":"Why Educhain?"},{"location":"launch/","text":"Launching on Rococo OpenZepppelin Polkadot Generic Runtime Template was chosen as a candidate for launching Educhain. They crafted the pallet list to be as minimalistic and preserved important pallets that are used in the Polkadot ecosystem. Their docs serve as a good starting point to understand the launch process of a parachain on Polkadot testnet Rococo. Personalizing the Template In a single shot, you can (almost) rebrand the runtime template to your own project by replacing the occurrences of parachain-runtime and parachain_runtime with your project name. Creating Production Ready Genesis Config It is common that most of the tutorials and templates use Alice or Bob keys for the root account, and for collator's keys and session keys. It is obvious that these should be replaced by custom keys. It is recommended that you use an account created on a cold wallet for the root account. It is also important for the collator key and its session key to be different. The collator key is recommended to be created on a cold wallet and the session key can be generated from a hot wallet, as you need to enter its seed/private key into the collator's key store to start producing blocks. The session keys are rotated often for this reason. Setting up an RPC Collator Node You can spin up a collator on your local machine or on a cloud instance of your choice. Educhain node runs as a Digital Ocean droplet . If you like to interact with your collator through Polkadot JS UI , the connection needs to be secure and hence not possible to just use the ip address. We had to secure a domain for Educhain and then setup a custom domain for the rpc address to be able to interact with it using Polkadot JS UI. The Substrate Front-end template does not have this restriction, if you like to try it out. On-demand Block Production Educhain is deployed on Rococo as an on-demand parachain. Transactions can be submitted to the collator node and they enter the transaction pool. When you like to execute these transactions, an order can be placed on Rococo relay chain for the parachain block production and validation through onDemandAssignmentProvider pallet call.","title":"Launching on Rococo"},{"location":"launch/#launching-on-rococo","text":"OpenZepppelin Polkadot Generic Runtime Template was chosen as a candidate for launching Educhain. They crafted the pallet list to be as minimalistic and preserved important pallets that are used in the Polkadot ecosystem. Their docs serve as a good starting point to understand the launch process of a parachain on Polkadot testnet Rococo.","title":"Launching on Rococo"},{"location":"launch/#personalizing-the-template","text":"In a single shot, you can (almost) rebrand the runtime template to your own project by replacing the occurrences of parachain-runtime and parachain_runtime with your project name.","title":"Personalizing the Template"},{"location":"launch/#creating-production-ready-genesis-config","text":"It is common that most of the tutorials and templates use Alice or Bob keys for the root account, and for collator's keys and session keys. It is obvious that these should be replaced by custom keys. It is recommended that you use an account created on a cold wallet for the root account. It is also important for the collator key and its session key to be different. The collator key is recommended to be created on a cold wallet and the session key can be generated from a hot wallet, as you need to enter its seed/private key into the collator's key store to start producing blocks. The session keys are rotated often for this reason.","title":"Creating Production Ready Genesis Config"},{"location":"launch/#setting-up-an-rpc-collator-node","text":"You can spin up a collator on your local machine or on a cloud instance of your choice. Educhain node runs as a Digital Ocean droplet . If you like to interact with your collator through Polkadot JS UI , the connection needs to be secure and hence not possible to just use the ip address. We had to secure a domain for Educhain and then setup a custom domain for the rpc address to be able to interact with it using Polkadot JS UI. The Substrate Front-end template does not have this restriction, if you like to try it out.","title":"Setting up an RPC Collator Node"},{"location":"launch/#on-demand-block-production","text":"Educhain is deployed on Rococo as an on-demand parachain. Transactions can be submitted to the collator node and they enter the transaction pool. When you like to execute these transactions, an order can be placed on Rococo relay chain for the parachain block production and validation through onDemandAssignmentProvider pallet call.","title":"On-demand Block Production"}]}