{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web3 Educhain Educating Web3 through Polkadot SDK. Why Educhain? When creating Web3 Educhain project, there were around 50 parachains on the Polkadot network but no concrete guides on launching a production-grade parachain and its maintenance. Also, there are very limited tutorials that demonstrate Polkadot SDK features that are shipped with FRAME library. Web3 Educhain intends to address these issues. Why Polkadot? Along with the efficient utility of coretime and blockspace, a parachain deployed on Polkadot has access to Multi-billion dollar security backed finality from block number one. Secure interoperability with multiple chains within and outside of the Polkadot ecosystem. Customizable blockchain runtimes written in Rust and executed as Wasm code. Decentralized network and networking stack with light-client prioritized design. Visionary, intellectual, smart (and at times oversmart) developer community. Welcome to the world of open-source development. Polkadot OpenGov and its Treasury, which pays OECD grade salaries to the Technical Fellowship and funds numerous development initiatives through bounties. With Agile Coretime, para chains can now produce blocks continuously or on demand. By activating Async Backing feature, parachains can produce blocks every 6 seconds whose transactions get finalized in 20-60 seconds, and around 800 TPS . With elastic scaling feature, the throughput of parachains is expected to improve further. In the near future, parachains can subscribe to the parachains service of JAM chain which enables advanced features that makes blockchain technology feasible for majority of its usecases. You can now launch a production-grade blockchain in a day! To learn how, navigate to the next page.","title":"Web3 Educhain"},{"location":"#web3-educhain","text":"Educating Web3 through Polkadot SDK.","title":"Web3 Educhain"},{"location":"#why-educhain","text":"When creating Web3 Educhain project, there were around 50 parachains on the Polkadot network but no concrete guides on launching a production-grade parachain and its maintenance. Also, there are very limited tutorials that demonstrate Polkadot SDK features that are shipped with FRAME library. Web3 Educhain intends to address these issues.","title":"Why Educhain?"},{"location":"#why-polkadot","text":"Along with the efficient utility of coretime and blockspace, a parachain deployed on Polkadot has access to Multi-billion dollar security backed finality from block number one. Secure interoperability with multiple chains within and outside of the Polkadot ecosystem. Customizable blockchain runtimes written in Rust and executed as Wasm code. Decentralized network and networking stack with light-client prioritized design. Visionary, intellectual, smart (and at times oversmart) developer community. Welcome to the world of open-source development. Polkadot OpenGov and its Treasury, which pays OECD grade salaries to the Technical Fellowship and funds numerous development initiatives through bounties. With Agile Coretime, para chains can now produce blocks continuously or on demand. By activating Async Backing feature, parachains can produce blocks every 6 seconds whose transactions get finalized in 20-60 seconds, and around 800 TPS . With elastic scaling feature, the throughput of parachains is expected to improve further. In the near future, parachains can subscribe to the parachains service of JAM chain which enables advanced features that makes blockchain technology feasible for majority of its usecases. You can now launch a production-grade blockchain in a day! To learn how, navigate to the next page.","title":"Why Polkadot?"},{"location":"asset-hub/","text":"Asset Hub Integration Asset Hub is a system chain of Rococo test network which allows for minting and managing fungible and non-fungible assets. Asset Hub Channel Setup Through this PR , the bi-directional HRMP channel setup with Asset Hub became permissionless and can be done through an XCM call from the parachain to Rococo relaychain. Here is the sudo XCM call used by the educhain for reference 0x0f001f000301000314000400000000070010a5d4e81300000000070010a5d4e80006000300c16678419c183c0ae8030000140d01000001003145 . Foreign Asset Registry The native token of a parachain can be registered as a Foriegn Asset on Asset Hub. This can be accomplished through an XCM call from the parachain to the Asset Hub that invokes create call of the foreignAssets pallet. Here is the call that needed to be executed on the Asset Hub to register its native token as a foreign asset 0x3500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000 . As this call cannot be directly executed on Rococo Asset Hub, it is wrapped in a sudo XCM call from the educhain 0x0f001f0003010100a10f0314000400010000070010a5d4e81300010000070010a5d4e80006030248fa7b419ce03500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000140d01000001003145 The next step is to create metadata for the asset on Asset Hub. Here is the call that needed to be executed on the AssetHub via the XCM message from Educhain 0x3511010100314520456475636861696e0c4544550a and here is the sudo XCM call used by the educhain to embed that call 0x0f001f0003010100a10f0314000400010000070010a5d4e81300010000070010a5d4e800060302389c1c419ce03500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000140d01000001003145","title":"Asset Hub Integration"},{"location":"asset-hub/#asset-hub-integration","text":"Asset Hub is a system chain of Rococo test network which allows for minting and managing fungible and non-fungible assets.","title":"Asset Hub Integration"},{"location":"asset-hub/#asset-hub-channel-setup","text":"Through this PR , the bi-directional HRMP channel setup with Asset Hub became permissionless and can be done through an XCM call from the parachain to Rococo relaychain. Here is the sudo XCM call used by the educhain for reference 0x0f001f000301000314000400000000070010a5d4e81300000000070010a5d4e80006000300c16678419c183c0ae8030000140d01000001003145 .","title":"Asset Hub Channel Setup"},{"location":"asset-hub/#foreign-asset-registry","text":"The native token of a parachain can be registered as a Foriegn Asset on Asset Hub. This can be accomplished through an XCM call from the parachain to the Asset Hub that invokes create call of the foreignAssets pallet. Here is the call that needed to be executed on the Asset Hub to register its native token as a foreign asset 0x3500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000 . As this call cannot be directly executed on Rococo Asset Hub, it is wrapped in a sudo XCM call from the educhain 0x0f001f0003010100a10f0314000400010000070010a5d4e81300010000070010a5d4e80006030248fa7b419ce03500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000140d01000001003145 The next step is to create metadata for the asset on Asset Hub. Here is the call that needed to be executed on the AssetHub via the XCM message from Educhain 0x3511010100314520456475636861696e0c4544550a and here is the sudo XCM call used by the educhain to embed that call 0x0f001f0003010100a10f0314000400010000070010a5d4e81300010000070010a5d4e800060302389c1c419ce03500010100314500706172614c11000000000000000000000000000000000000000000000000000000ca9a3b000000000000000000000000140d01000001003145","title":"Foreign Asset Registry"},{"location":"launch/","text":"Launching on Rococo OpenZepppelin Polkadot Generic Runtime Template was chosen as a candidate for launching Educhain. They crafted the pallet list to be as minimalistic and preserved important pallets that are used in the Polkadot ecosystem. Their docs serve as a good starting point to understand the launch process of a parachain on Polkadot testnet Rococo. Personalize Template In a single shot, you can (almost) rebrand the runtime template to your own project by replacing the occurrences of parachain-runtime and parachain_runtime with your project name. Set Genesis Config It is common that most of the tutorials and templates use Alice or Bob keys for the root account, and for collator's keys and session keys. It is obvious that these should be replaced by custom keys. It is recommended that you use an account created on a cold wallet for the root account. It is also important for the collator key and its session key to be different. The collator key is recommended to be created on a cold wallet and the session key can be generated from a hot wallet, as you need to enter its seed/private key into the collator's key store to start producing blocks. The session keys are rotated often for this reason. Collator Node Setup You can spin up a collator on your local machine or on a cloud instance of your choice. Educhain node runs as a Digital Ocean droplet . If you like to interact with your collator through Polkadot JS UI , the connection needs to be secure and hence not possible to just use the ip address. We had to secure a domain for Educhain and then setup a custom domain for the rpc address to be able to interact with it using Polkadot JS UI. The Substrate Front-end template does not have this restriction, if you like to try it out. Block Production Educhain is deployed on Rococo as an on-demand parachain. Transactions can be submitted to the collator node and they enter the transaction pool. When you like to execute these transactions, an order can be placed on Rococo relay chain for the parachain block production and validation through onDemandAssignmentProvider pallet call. If you intend to have a parachain that produces blocks continously, you can purchase bulk coretime through awesome interfaces from Lastic or RegionX .","title":"Launching on Rococo"},{"location":"launch/#launching-on-rococo","text":"OpenZepppelin Polkadot Generic Runtime Template was chosen as a candidate for launching Educhain. They crafted the pallet list to be as minimalistic and preserved important pallets that are used in the Polkadot ecosystem. Their docs serve as a good starting point to understand the launch process of a parachain on Polkadot testnet Rococo.","title":"Launching on Rococo"},{"location":"launch/#personalize-template","text":"In a single shot, you can (almost) rebrand the runtime template to your own project by replacing the occurrences of parachain-runtime and parachain_runtime with your project name.","title":"Personalize Template"},{"location":"launch/#set-genesis-config","text":"It is common that most of the tutorials and templates use Alice or Bob keys for the root account, and for collator's keys and session keys. It is obvious that these should be replaced by custom keys. It is recommended that you use an account created on a cold wallet for the root account. It is also important for the collator key and its session key to be different. The collator key is recommended to be created on a cold wallet and the session key can be generated from a hot wallet, as you need to enter its seed/private key into the collator's key store to start producing blocks. The session keys are rotated often for this reason.","title":"Set Genesis Config"},{"location":"launch/#collator-node-setup","text":"You can spin up a collator on your local machine or on a cloud instance of your choice. Educhain node runs as a Digital Ocean droplet . If you like to interact with your collator through Polkadot JS UI , the connection needs to be secure and hence not possible to just use the ip address. We had to secure a domain for Educhain and then setup a custom domain for the rpc address to be able to interact with it using Polkadot JS UI. The Substrate Front-end template does not have this restriction, if you like to try it out.","title":"Collator Node Setup"},{"location":"launch/#block-production","text":"Educhain is deployed on Rococo as an on-demand parachain. Transactions can be submitted to the collator node and they enter the transaction pool. When you like to execute these transactions, an order can be placed on Rococo relay chain for the parachain block production and validation through onDemandAssignmentProvider pallet call. If you intend to have a parachain that produces blocks continously, you can purchase bulk coretime through awesome interfaces from Lastic or RegionX .","title":"Block Production"}]}