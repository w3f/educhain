//! Autogenerated weights for `pallet_news`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `FVFFHJF2Q05D-w3f.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/educhain-runtime/educhain_runtime.compact.compressed.wasm
// --pallet
// pallet_news
// --extrinsic
//
// --template
// ../frame-weight-template.hbs
// --output
// weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame::{ deps::frame_support::weights::constants::RocksDbWeight, prelude::* };
use core::marker::PhantomData;

/// Weight functions needed for `pallet_news`.
pub trait WeightInfo {
    fn record_article() -> Weight;
    fn update_article() -> Weight;
}

/// Weights for `pallet_news` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: `News::ArticleByHash` (r:1 w:1)
    /// Proof: `News::ArticleByHash` (`max_values`: None, `max_size`: Some(483), added: 2958, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticlesByPublisher` (r:1 w:1)
    /// Proof: `News::ArticlesByPublisher` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::HistoryByAnchor` (r:1 w:1)
    /// Proof: `News::HistoryByAnchor` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::AnchorOf` (r:0 w:1)
    /// Proof: `News::AnchorOf` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticleUpdateCount` (r:0 w:1)
    /// Proof: `News::ArticleUpdateCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `News::RootByItem` (r:0 w:1)
    /// Proof: `News::RootByItem` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
    fn record_article() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3`
        //  Estimated: `5114`
        // Minimum execution time: 58_000_000 picoseconds.
        Weight::from_parts(59_000_000, 5114)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// Storage: `News::ArticleByHash` (r:2 w:1)
    /// Proof: `News::ArticleByHash` (`max_values`: None, `max_size`: Some(483), added: 2958, mode: `MaxEncodedLen`)
    /// Storage: `News::AnchorOf` (r:1 w:1)
    /// Proof: `News::AnchorOf` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
    /// Storage: `News::HistoryByAnchor` (r:1 w:1)
    /// Proof: `News::HistoryByAnchor` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticleUpdateCount` (r:0 w:1)
    /// Proof: `News::ArticleUpdateCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `News::RootByItem` (r:0 w:1)
    /// Proof: `News::RootByItem` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
    fn update_article() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `602`
        //  Estimated: `6906`
        // Minimum execution time: 28_000_000 picoseconds.
        Weight::from_parts(29_000_000, 6906)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
}

// For backwards compatibility and tests.
impl WeightInfo for () {
    /// Storage: `News::ArticleByHash` (r:1 w:1)
    /// Proof: `News::ArticleByHash` (`max_values`: None, `max_size`: Some(483), added: 2958, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticlesByPublisher` (r:1 w:1)
    /// Proof: `News::ArticlesByPublisher` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::HistoryByAnchor` (r:1 w:1)
    /// Proof: `News::HistoryByAnchor` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::AnchorOf` (r:0 w:1)
    /// Proof: `News::AnchorOf` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticleUpdateCount` (r:0 w:1)
    /// Proof: `News::ArticleUpdateCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `News::RootByItem` (r:0 w:1)
    /// Proof: `News::RootByItem` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
    fn record_article() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3`
        //  Estimated: `5114`
        // Minimum execution time: 58_000_000 picoseconds.
        Weight::from_parts(59_000_000, 5114)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    /// Storage: `News::ArticleByHash` (r:2 w:1)
    /// Proof: `News::ArticleByHash` (`max_values`: None, `max_size`: Some(483), added: 2958, mode: `MaxEncodedLen`)
    /// Storage: `News::AnchorOf` (r:1 w:1)
    /// Proof: `News::AnchorOf` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
    /// Storage: `News::HistoryByAnchor` (r:1 w:1)
    /// Proof: `News::HistoryByAnchor` (`max_values`: None, `max_size`: Some(1649), added: 4124, mode: `MaxEncodedLen`)
    /// Storage: `News::ArticleUpdateCount` (r:0 w:1)
    /// Proof: `News::ArticleUpdateCount` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `News::RootByItem` (r:0 w:1)
    /// Proof: `News::RootByItem` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
    fn update_article() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `602`
        //  Estimated: `6906`
        // Minimum execution time: 28_000_000 picoseconds.
        Weight::from_parts(29_000_000, 6906)
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
}
